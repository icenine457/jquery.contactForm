// Generated by CoffeeScript 1.4.0
(function() {

  (function($) {
    var createHeading, createInput, formIsValid, methods, populateOptions, settings;
    settings = {
      validate: true,
      debug: false,
      responseHeader: "Thank You!",
      responseMsg: "Your contact information and message has been sent. We will get back to you soon!",
      contactFormHeader: "Contact Us",
      contactFormMsg: "Please use this form to contact us at your convenience.",
      preferredContactMethods: ["Choose a contact method", "Phone", "E-mail"],
      postUrl: "/Home/PostContactUs",
      maxNameLength: 100,
      dontSend: false
    };
    createInput = function(parent, labelText, namePrefix, inputType) {
      var input, inputDiv, label, labelDiv;
      if (inputType == null) {
        inputType = "text";
      }
      labelDiv = $("<div />", {
        "class": "label"
      });
      label = $("<label />", {
        text: labelText
      }).appendTo(labelDiv);
      parent.append(labelDiv);
      inputDiv = $("<div />", {
        "class": "input"
      });
      input = "";
      switch (inputType) {
        case "select":
          input = $("<select />", {
            type: inputType,
            val: "",
            name: namePrefix + "Input"
          });
          populateOptions($(input), settings.preferredContactMethods);
          break;
        case "textarea":
          input = $("<textarea />", {
            type: inputType,
            rows: 10,
            val: "",
            name: namePrefix + "Input",
            'data-val-text': labelText + " is not valid"
          });
          break;
        case "button":
          input = $("<input />", {
            type: "button",
            val: "Submit",
            name: namePrefix + "Input"
          });
          break;
        default:
          input = $("<input />", {
            type: inputType,
            val: "",
            "class": 'required',
            'data-val-text': labelText + " is not valid",
            name: namePrefix + "Input"
          });
      }
      input.appendTo(inputDiv);
      parent.append(inputDiv);
      return input;
    };
    populateOptions = function(parent, options) {
      var option, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        _results.push(parent.append($("<option>" + option + "</option>", {
          value: option
        })));
      }
      return _results;
    };
    createHeading = function(parent, headerText, message) {
      var header, responseDiv, responseText;
      responseDiv = $("<div class='message-body-response-header' />");
      header = $("<h1>" + headerText + "</h1>");
      responseText = $("<p>" + message + "</p>");
      header.appendTo(responseDiv);
      responseText.appendTo(responseDiv);
      responseDiv.appendTo(parent);
      return responseDiv;
    };
    methods = {
      init: function(options) {
        if (typeof console !== "undefined" && console !== null) {
          console.log("Preparing contactForm");
        }
        return this.each(function() {
          var contactFormHead, emailInput, form, messageInput, nameInput, phoneInput, preferredContactMethodInput, responseHead, subjectInput, submitInput, thisRef;
          thisRef = $(this);
          form = $("<form>", {
            "class": "contactForm",
            method: "get",
            action: ""
          });
          settings = $.extend(settings, options);
          contactFormHead = createHeading(thisRef, settings.contactFormHeader, settings.contactFormMsg);
          responseHead = createHeading(thisRef, settings.responseHeader, settings.responseMsg);
          responseHead.hide();
          nameInput = createInput(form, "Name", "name");
          emailInput = createInput(form, "Email", "email");
          phoneInput = createInput(form, "Phone", "phone");
          preferredContactMethodInput = createInput(form, "Contact me via", "preferredContact", "select");
          subjectInput = createInput(form, "Subject", "subject");
          messageInput = createInput(form, "Message", "message", "textarea");
          submitInput = createInput(form, "", "submit", "button");
          form.appendTo($(this));
          return submitInput.click(function() {
            var postData;
            if (!(settings.validate && formIsValid(form))) {
              return;
            }
            postData = {
              ContactName: nameInput.val(),
              ContactEmail: emailInput.val(),
              ContactPhone: phoneInput.val(),
              ContactVia: preferredContactMethodInput.val(),
              ContactSubject: subjectInput.val(),
              ContactMessage: messageInput.val()
            };
            if (options.debug) {
              if (typeof console !== "undefined" && console !== null) {
                console.log(JSON.stringify(postData));
              }
            }
            form.hide();
            contactFormHead.hide();
            responseHead.show();
            if (!settings.dontSend) {
              return $.ajax(settings.postUrl, {
                type: 'POST',
                dataType: 'json',
                data: postData
              });
            }
          });
        });
      },
      destroy: function() {
        var _this = this;
        if (typeof console !== "undefined" && console !== null) {
          console.log("Removing");
        }
        this.find('a').each(function(index, element) {
          return $(element).tipsy("hide");
        });
        return this.empty();
      }
    };
    formIsValid = function(form) {
      var invalid,
        _this = this;
      invalid = 0;
      form.find('input, textarea').each(function(index, element) {
        var emailRe, phoneVal, thisInput, thisInputInvalid, tipsyDiv, valElem;
        thisInput = $(element);
        thisInputInvalid = false;
        if ($.fn.tipsy) {
          tipsyDiv = $('body').find('div.tipsy-inner:contains("' + thisInput.attr('data-val-text') + '")');
          if (tipsyDiv) {
            tipsyDiv.parent().remove();
          }
        }
        switch (thisInput.attr('name')) {
          case "nameInput":
          case "subjectInput":
          case "messageInput":
            if (thisInput.val().length < 2 || !/[A-Za-z0-9'].*/.test(thisInput.val())) {
              invalid++;
              thisInputInvalid = true;
            }
            break;
          case "phoneInput":
            phoneVal = thisInput.val().replace(/[\+\(\)\-x\s]/g, '');
            if (phoneVal && isNaN(phoneVal)) {
              invalid++;
              thisInputInvalid = true;
            }
            break;
          case "emailInput":
            emailRe = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            if (thisInput.val().length < 6 || !emailRe.test(thisInput.val())) {
              invalid++;
              thisInputInvalid = true;
            }
        }
        if (thisInputInvalid) {
          valElem = $("<a />", {
            title: thisInput.attr('data-val-text'),
            href: "#"
          });
          thisInput.after(valElem);
          if ($.fn.tipsy) {
            valElem.tipsy({
              trigger: 'manual',
              gravity: 'w',
              fade: true
            });
            return valElem.tipsy("show");
          }
        }
      });
      if (invalid > 0) {
        return false;
      } else {
        return true;
      }
    };
    $.fn.contactForm = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === 'object' || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("jQuery.pluginName: Method " + method + " does not exist on jQuery.pluginName");
      }
    };
  })(jQuery);

}).call(this);
